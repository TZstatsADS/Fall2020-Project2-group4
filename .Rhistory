shiny::runApp()
runApp()
R.version.string
shiny::runApp()
output
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(zoo)
install.packages("zoo")
library(zoo)
library(dplyr)
library(rworldmap)
install.packages("rworldmap")
library(zoo)
library(dplyr)
library(rworldmap)
library(sf)
library(mapview)
install.packages("mapview")
library(zoo)
library(dplyr)
library(rworldmap)
library(sf)
library(mapview)
#importing the 5 datasets
confirmedUS <- read.csv(file = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
confirmedglobal <- read.csv(file = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
deathsUS <- read.csv(file = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv")
deathsglobal <- read.csv(file = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
recoveredglobal <- read.csv(file = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
library(leaflet)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="DATA/world_shape_file.zip")
# You now have it in your current working directory, have a look!
# Unzip this file. You can do it with R (as below), or clicking on the object you downloaded.
system("unzip DATA/world_shape_file.zip")
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="DATA/world_shape_file.zip")
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="/Users/raymondliang/Desktop/world_shape_file.zip")
# Unzip this file. You can do it with R (as below), or clicking on the object you downloaded.
system("unzip /Users/raymondliang/Desktop/world_shape_file.zip")
library(rgdal)
world_spdf <- readOGR(
dsn= paste0(getwd(),"/DATA/world_shape_file/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf <- readOGR(
dsn= paste0(getwd(),"/Users/raymondliang/Desktop/world_shape_file.zip") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf <- readOGR(
dsn= paste0(getwd(),"/Users/raymondliang/Desktop/world_shape_file.zip/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
getwd()
world_spdf <- readOGR(
dsn= paste0("/Users/raymondliang/Desktop/world_shape_file.zip/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf <- readOGR(
dsn= paste0("/Users/raymondliang/Desktop/world_shape_file.zip") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
dsn= paste0("/Users/raymondliang/Desktop/world_shape_file) ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
dsn= paste0("/Users/raymondliang/Desktop/world_shape_file) ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
world_spdf <- readOGR(
dsn= paste0("/Users/raymondliang/Desktop/world_shape_file") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf <- readOGR(
dsn= paste0("/Users/raymondliang/Desktop/data/world_shape_file/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf <- readOGR(
dsn= paste0("/Users/raymondliang/Desktop/data/world_shape_file") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf <- readOGR(
dsn= paste0(getwd(),"/Users/raymondliang/Desktop/data/world_shape_file") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf <- readOGR(
dsn= paste0("/Users/raymondliang/Desktop/data/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf <- readOGR(
dsn= paste0("/Users/raymondliang/Desktop/world_shape_file") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
library(rgdal)
?ggplot
library(ggplot2)
confirmedglobal
library(maps)
map_data("world")
world<-map_data("world")
world$
ggplot()+
geom_polygon(world,aes(x=Long,y=Lat,group))
world$group
world
world<-map_data("world")
ggplot()+
geom_polygon(world,aes(x=long,y=lat,group = group),fill="grey")+
geom_point(data = confirmedglobal,aes(x=Long,y=Lat))+
theme_void()
ggplot()+
geom_polygon(data = world,aes(x=long,y=lat,group = group),fill="grey")+
geom_point(data = confirmedglobal,aes(x=Long,y=Lat))+
theme_void()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
getwd()
shiny::runApp()
#--------------------------------------------------------------------
###############################Install Related Packages #######################
if (!require("dplyr")) {
install.packages("dplyr")
library(dplyr)
}
if (!require("tibble")) {
install.packages("tibble")
library(tibble)
}
if (!require("tidyverse")) {
install.packages("tidyverse")
library(tidyverse)
}
if (!require("shinythemes")) {
install.packages("shinythemes")
library(shinythemes)
}
if (!require("sf")) {
install.packages("sf")
library(sf)
}
if (!require("RCurl")) {
install.packages("RCurl")
library(RCurl)
}
if (!require("tmap")) {
install.packages("tmap")
library(tmap)
}
if (!require("rgdal")) {
install.packages("rgdal")
library(rgdal)
}
if (!require("leaflet")) {
install.packages("leaflet")
library(leaflet)
}
if (!require("shiny")) {
install.packages("shiny")
library(shiny)
}
if (!require("shinythemes")) {
install.packages("shinythemes")
library(shinythemes)
}
if (!require("plotly")) {
install.packages("plotly")
library(plotly)
}
if (!require("ggplot2")) {
install.packages("ggplot2")
library(ggplot2)
}
if (!require("viridis")) {
install.packages("viridis")
library(viridis)
}
if (!require("highcharter")) {
install.packages("highcharter")
library(highcharter)
}
if (!require("lubridate")) {
install.packages("lubridate")
library(lubridate)
}
#--------------------------------------------------------------------
###############################Define Functions#######################
# Help to select the data that are between March and June
date_truncate<-function(data){
data$DATE_OF_INTEREST<-as.Date(data$DATE_OF_INTEREST, format = "%m/%d/%y")
data_new<-data[data$DATE_OF_INTEREST >= "2020-03-01" & data$DATE_OF_INTEREST < "2020-07-01",]
data_new<-data_new %>% rename(
timestamp =  DATE_OF_INTEREST
)
return(data_new)
}
setwd('..')
output_shapefile_filepath <- "./output/clean_parks_data.csv"
park_data<-read.csv(output_shapefile_filepath)
park_data$timestamp<-as.Date(as.POSIXct(park_data$timestamp, origin="1970-01-01"))
park_borough_data<-park_data %>%
count(park_borough,timestamp,name="number")
park_borough_data<-park_borough_data[order(park_borough_data$timestamp),]
BX_bor<-park_borough_data[park_borough_data$park_borough == "Bronx",]
BK_bor<-park_borough_data[park_borough_data$park_borough == "Brooklyn",]
MN_bor<-park_borough_data[park_borough_data$park_borough == "Manhattan",]
QN_bor<-park_borough_data[park_borough_data$park_borough == "Queens",]
SI_bor<-park_borough_data[park_borough_data$park_borough ==  "Staten Island",]
#Download from NYC health Covid 19 data link
# https://www1.nyc.gov/site/doh/covid/covid-19-data-boroughs.page
BK_data<-read.csv('./output/data-BK.csv')
BX_data<-read.csv('./output/data-BX.csv')
MN_data<-read.csv('./output/data-MN.csv')
QN_data<-read.csv('./output/data-QN.csv')
SI_data<-read.csv('./output/data-SI.csv')
# Truncating the data to the date between March and June
BK_data<-date_truncate(BK_data)
BX_data<-date_truncate(BX_data)
MN_data<-date_truncate(MN_data)
QN_data<-date_truncate(QN_data)
SI_data<-date_truncate(SI_data)
#Merging covid data and park crowds data
BK_data<-merge(BK_data,BK_bor,by="timestamp")
BX_data<-merge(BX_data,BX_bor,by="timestamp")
MN_data<-merge(MN_data,MN_bor,by="timestamp")
QN_data<-merge(QN_data,QN_bor,by="timestamp")
SI_data<-merge(SI_data,SI_bor,by="timestamp")
# read ZIP_CODE_040114.shp
path_zip = "./data/ZIP_CODE_040114/"
file_zip = "ZIP_CODE_040114.shp"
zipcode_geo <- sf::st_read(paste0(path_zip, file_zip)) %>%
sf::st_transform('+proj=longlat +datum=WGS84')
getwd()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
